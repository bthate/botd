#!/usr/bin/python3 -u
# BOTD - python3 IRC channel daemon.
#
# mybot.

__version__ = 1

import os, sys ; sys.path.insert(0, os.getcwd())

import botd.krn
import logging

from botd.csl import Console
from botd.err import EINIT
from botd.evt import Event
from botd.krn import Kernel, workdir
from botd.log import level, logfiled
from botd.shl import close_history, enable_history, parse_cli, set_completer
from botd.trm import reset, save
from botd.trc import get_exception
from botd.utl import hd

opts = [
    ('-b', '--background', 'store_true', False, 'run in daemon mode.', 'daemon'),
    ('-d', '--datadir', 'store', str, 'set working directory.', 'workdir'),
    ('-m', '--modules', 'store', str, 'modules to load.', 'modules'),
    ('-x', '--exec', 'store_true', False, 'execute command.', 'doexec'),
    ('-o', '--options', "store", str, "options to use.", 'options'),
    ('-k', '--kernel', "store_true", False, "read from previous kernel config.", 'kernel'),
    ('-p', '--prompting', "store_false", True, "disable prompting for initial values.", 'prompting'),
    ('-s', '--save', 'store_true', False, 'save configuration files.', 'dosave'),
    ('-z', '--shell', 'store_true', False, 'disable shell.', 'shell'),
    ('-e', '--exclude', 'store', str, 'exclude modules.', 'exclude'),
    ('-l', '--loglevel', 'store', str, 'set loglevel.', 'level'),
    ('-a', '--logdir', "store", str, "directory to find the logfiles.", 'logdir'),
    ('-v', '--verbose', 'store_true', False, 'enable verbose mode.', 'verbose')
]

class Event(Event):

    def show(self):
        for txt in self.result:
            k.fleet.echo(self.channel, txt)

def daemon():
    pid = os.fork()
    if pid != 0:
        reset()
        os._exit(0)
    os.setsid()
    os.umask(0)
    si = open("/dev/null", 'r')
    so = open("/dev/null", 'a+')
    se = open("/dev/null", 'a+')
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())

def execute(main):
    save()
    try:
        main()
    except KeyboardInterrupt:
        print("")
    except Exception:
        logging.error(get_exception())
    reset()
    close_history()

def v(event):
    event.reply("MYBOT %s" % __version__)    

def main():
    cfg = parse_cli("mybot", __version__, opts, wd=hd(".botd"))
    logging.warning("%s started at %s (%s)" % (cfg.name.upper(), cfg.workdir, cfg.level))
    k = Kernel(cfg)
    k.init("botd")
    try:
        k.init(cfg.modules)
    except ModuleNotFoundError as ex:
        print(str(ex))
    except EINIT as ex:
        print(str(ex))
        return
    if cfg.doexec:
        if cfg.modules:
            k.walk(cfg.modules)
        k.cmd(cfg.txt)
        return
    if k.cfg.shell:
        c = Console()
        c.sync(k)
        c.start()
        set_completer(k.cmds)
        enable_history()
    else:
        k.start()
    k.wait()

execute(main)
os._exit(0)
