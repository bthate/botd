#!/usr/bin/python3
# BOTLIB - Framework to program bots (a botlib).
#
# run unittests.

__version__ = 1

import os, sys ; sys.path.insert(0, os.getcwd())

import logging
import shutil
import time
import unittest
import botd

from botd.err import EINIT
from botd.obj import Object, starttime
from botd.krn import Kernel
from botd.log import level
from botd.shl import parse_cli
from botd.tms import elapsed
from botd.trc import get_exception
from botd.trm import termsave, termreset
from botd.typ import get_cls
from botd.usr import Users
from botd.utl import cdir

opts = [
    ('-d', '--datadir', 'store', str, "", 'set working directory.', 'workdir'),
    ('-m', '--modules', 'store', str, "", 'modules to load.', 'modules'),
    ('-o', '--options', "store", str, "", "options to use.", 'options'),
    ('-l', '--loglevel', 'store', str, "", 'set loglevel.', 'level'),
    ('-v', '--verbose', 'store_true', False, 'enable verbose mode.', 'verbose')
]

def execute(main):
    termsave()
    try:
        main()
    except KeyboardInterrupt:
        print("")
    except EINIT:
        pass
    except PermissionError:
        print("you need root permissions.")
    except Exception:
        logging.error(get_exception())
    finally:
        termreset()

def initialize(k, cfg):
    cdir("testdata")
    k.users.oper("test@shell")
    k.cfg.prompt = False
    k.walk("botd")
    k.start()

def main():
    try:
        shutil.rmtree("testdata")
    except:
        pass
    cfg = parse_cli("test", __version__, opts)
    botd.obj.workdir = "testdata"
    k = Kernel(cfg)
    level("error")
    initialize(k, cfg)
    k.cfg.debug = True
    level(k.cfg.level)
    test_path = os.getcwd() + os.sep + "tests"
    p = ""
    if k.cfg.args:
        p = "test_%s*" % k.cfg.args[0]
    if not p:
        p = "test_*"
    suite = unittest.loader.TestLoader().discover(test_path, pattern=p)
    unittest.TextTestRunner(verbosity=3).run(suite)
   
execute(main)
print(elapsed(time.time() - starttime))
os._exit(0)
