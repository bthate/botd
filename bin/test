#!/usr/bin/python3
# BOTLIB - Framework to program bots.
#
# 

__version__ = 1

import os, sys ; sys.path.insert(0, os.getcwd())

import bl
import logging
import shutil
import time
import unittest

opts = [
    ('-d', '--datadir', 'store', str, 'set working directory.', 'workdir'),
    ('-m', '--modules', 'store', str, 'modules to load.', 'modules'),
    ('-o', '--options', "store", str, "options to use.", 'options'),
    ('-l', '--loglevel', 'store', str, 'set loglevel.', 'level'),
    ('-v', '--verbose', 'store_true', False, 'enable verbose mode.', 'verbose')
]


def initialize():
    bl.utl.cdir("testdata")
    bl.k.users.oper("test@shell")
    bl.k.cfg.prompt = False
    bl.k.walk("bl")
    bl.k.start()
    for c in bl.k.classes:
        try:
            o = bl.typ.get_cls(c)()
            o.txt = "yo!"
            o.save()
        except TypeError as ex:
            pass

def main():
    try:
        shutil.rmtree("testdata")
    except:
        pass
    bl.shl.parse_cli("test", 1, opts, wd="testdata")
    bl.workdir = "testdata"
    bl.log.level("debug")
    initialize()
    bl.k.cfg.exclude = "mdl,rss"
    bl.k.cfg.debug = True
    bl.log.level(bl.k.cfg.level)
    test_path = os.getcwd() + os.sep + "tests"
    p = ""
    if bl.k.cfg.args:
        p = "test_%s*" % bl.k.cfg.args[0]
    if not p:
        p = "test_*"
    suite = unittest.loader.TestLoader().discover(test_path, pattern=p)
    unittest.TextTestRunner(verbosity=3).run(suite)
   
bl.shl.execute(main)
print(bl.tms.elapsed(time.time() - bl.k.state.starttime))
os._exit(0)
